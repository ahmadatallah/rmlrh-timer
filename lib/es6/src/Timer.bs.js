// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE

import * as Css from "bs-css/lib/es6/src/Css.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_format from "bs-platform/lib/es6/caml_format.js";
import * as Button$ReactHooksTemplate from "./Button.bs.js";

var timer = Css.style(/* :: */[
      Css.border(Css.px(1), Css.solid, Css.black),
      /* :: */[
        Css.borderRadius(Css.px(8)),
        /* :: */[
          Css.maxWidth(Css.px(180)),
          /* :: */[
            Css.textAlign(Css.center),
            /* [] */0
          ]
        ]
      ]
    ]);

var seconds = Css.style(/* :: */[
      Css.color(Css.hex("444444")),
      /* :: */[
        Css.fontSize(Css.px(42)),
        /* :: */[
          Css.margin(Css.px(16)),
          /* [] */0
        ]
      ]
    ]);

var Styles = /* module */[
  /* timer */timer,
  /* seconds */seconds
];

function padNumber(numString) {
  if (Caml_format.caml_int_of_string(numString) < 10) {
    return "0" + numString;
  } else {
    return numString;
  }
}

function formatTime(seconds) {
  var mins = seconds / 60 | 0;
  var minsString = padNumber(String(mins));
  var seconds$1 = seconds % 60;
  var secondsString = padNumber(String(seconds$1));
  return minsString + (":" + secondsString);
}

var updateTitle = (
  function updateTitle(remaining) {
    document.title = "⏰ " + remaining + " ⏰";
  });

function Timer(Props) {
  var initialState = /* record */[
    /* seconds */90,
    /* isTicking */false
  ];
  var match = React.useReducer((function (state, action) {
          switch (action) {
            case 0 : 
                return /* record */[
                        /* seconds */state[/* seconds */0],
                        /* isTicking */true
                      ];
            case 1 : 
                return /* record */[
                        /* seconds */state[/* seconds */0],
                        /* isTicking */false
                      ];
            case 2 : 
                return /* record */[
                        /* seconds */90,
                        /* isTicking */state[/* isTicking */1]
                      ];
            case 3 : 
                var match = state[/* isTicking */1] && state[/* seconds */0] > 0;
                if (match) {
                  Curry._1(updateTitle, formatTime(state[/* seconds */0] - 1 | 0));
                  return /* record */[
                          /* seconds */state[/* seconds */0] - 1 | 0,
                          /* isTicking */state[/* isTicking */1]
                        ];
                } else {
                  Curry._1(updateTitle, "Pomodoro Timer");
                  var state$1 = state;
                  var match$1 = state$1[/* seconds */0];
                  if (match$1 !== 0) {
                    return state$1;
                  } else {
                    return initialState;
                  }
                }
            
          }
        }), initialState);
  var dispatch = match[1];
  var state = match[0];
  var dispatchStart = function (_event) {
    return Curry._1(dispatch, /* Start */0);
  };
  var dispatchStop = function (_event) {
    return Curry._1(dispatch, /* Stop */1);
  };
  var dispatchReset = function (_event) {
    return Curry._1(dispatch, /* Reset */2);
  };
  React.useEffect((function () {
          var timer = setInterval((function (param) {
                  return Curry._1(dispatch, /* Tick */3);
                }), 1000);
          return (function (param) {
                    clearInterval(timer);
                    return /* () */0;
                  });
        }));
  var match$1 = state[/* isTicking */1];
  return React.createElement("div", {
              className: timer
            }, React.createElement("p", {
                  className: seconds
                }, formatTime(state[/* seconds */0])), match$1 ? React.createElement(Button$ReactHooksTemplate.make, {
                    onClick: dispatchStop,
                    title: "STOP",
                    children: "Stop",
                    category: /* PRIMARY */1
                  }) : React.createElement(React.Fragment, undefined, React.createElement(Button$ReactHooksTemplate.make, {
                        onClick: dispatchStart,
                        title: "START",
                        children: "Start",
                        category: /* SECONDARY */0
                      }), React.createElement(Button$ReactHooksTemplate.make, {
                        onClick: dispatchReset,
                        title: "RESET",
                        children: "Reset",
                        category: /* SECONDARY */0
                      })));
}

var timerLimit = 90;

var make = Timer;

export {
  Styles ,
  padNumber ,
  timerLimit ,
  formatTime ,
  updateTitle ,
  make ,
  
}
/* timer Not a pure module */
